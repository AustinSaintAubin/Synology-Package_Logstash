# This configuration file parses Java application logs with multiline
# Structure of this configuration file is Input - Filter(s) - Output 
# This configuration file will get the input from a File, Filters for the pattern and outputs to Stout/Graphite
# 
# How to run: 
# Step 1 :Create a folder /logstashdemo/
# Step 2 :Copy JavaLoggerApp.jar to $PWD
# Step 3 :sudo java -jar JavaLoggerApp.jar
# Step 4 :copy this configuration file to $PWD
# Step 5 :copy this logstash-1.1.9-monolithic.jar  file to $PWD
# Step 6 :sudo java -jar JavaLoggerApp.jar
# Step 7 :sudo java -jar logstash-1.1.9-monolithic.jar agent -f <conf_file_name>.conf

# [ Syslog Testing with NC ]
# nc -w0 -u 172.16.1.90 514 <<< â€œTest Syslog Message"
# echo '<14>sourcehost message text' | nc -v -u -w 0 172.16.1.90 514

# [ Infinate Loop Output for Syslog Testing ]
# while true; do nc -w0 -u 192.168.8.10 514 <<< "Test Syslog Message from NC"; done
# while true; do echo '<14>sourcehost message text' | nc -v -u -w 0 172.16.1.90 514; sleep 2; done
# while true; do echo '<134>1 1392201045.9300000000 Meraki_Security_Applicance urls src=172.16.0.1:1 dst=192.168.0.1:80 mac=00:18:0A:77:1B:D7 request: GET http://192.168.3.12/fog/service/servicemodule-active.php?mac=00:0F:20:FE:CA:A8&moduleid=snapin' | nc -v -u -w 0 172.16.1.90 552; done

# [ Watch for Elasticsearch to come online ]
# while true; do curl http://nest.ocacademy.org:9200; sleep 2; done

# Run Logstash for Debuging
# /usr/bin/java -jar /opt/logstash/logstash.jar agent -f /etc/logstash/logstash.conf  # --log /var/log/logstash.log

############################################ Input ###############################################
#This is to specify the input 
#More details about the input is under input section in : http://www.logstash.net/docs/1.1.9/ 
#This input filter reads from a file.
#NOTE: If the file is not present in the location, logstash moves on (No exception will be thrown from the logstash app)
#make sure you have the Logging.log file.
#NOTE: file input will have the same effect as "tail -f unix command". Make sure your Logging.log file has some recent changes.
#Each entry in the file will be considered as an event.
#Each input file can be given a "type" name for further use in filtering the event.

input {
#	# Run Commands
#	exec {
#		type => "exec_snmp_sw_noc_1"
#		command => "snmpwalk -v2c -c public 172.16.1.2:161" #"snmpwalk -v2c -c public 192.168.8.1:161" #  "df -m"
#		#snmpwalk -v2c -c public 172.16.1.2:161 | egrep -w 'ifAlias|ifName'
#		interval => 1800
#	}

	# Input from syslog
	# syslog {
	# 	add_field => ... # hash (optional), default: {}
	# 	codec => ... # codec (optional), default: "plain"
	# 	facility_labels => ... # array (optional), default: ["kernel", "user-level", "mail", "system", "security/authorization", "syslogd", "line printer", "network news", "UUCP", "clock", "security/authorization", "FTP", "NTP", "log audit", "log alert", "clock", "local0", "local1", "local2", "local3", "local4", "local5", "local6", "local7"]
	# 	host => ... # string (optional), default: "0.0.0.0"
	# 	port => ... # number (optional), default: 514
	# 	severity_labels => ... # array (optional), default: ["Emergency", "Alert", "Critical", "Error", "Warning", "Notice", "Informational", "Debug"]
	# 	tags => ... # array (optional)
	# 	type => ... # string (optional)
	# 	use_labels => ... # boolean (optional), default: true
	# }
	udp {
		port => 514
		type => syslog
	}
	tcp {
		port => 514
		type => syslog
	}
	
	# Meraki Security Applicance
	udp {
		port => 550
		type => syslog_meraki_sa_events
	}
	udp {
		port => 551
		type => syslog_meraki_sa_flows
	}
	udp {
		port => 552
		type => syslog_meraki_sa_url
	}
	udp {
		port => 553
		type => syslog_meraki_sa_ids
	}
	
	# Meraki Switches
	udp {
		port => 554
		type => syslog_meraki_sw_events
	}
# 	udp {
# 		port => 555
# 		type => syslog_meraki_sw_
# 	}
# 	udp {
# 		port => 556
# 		type => syslog_meraki_sw_
# 	}
	
	# Meraki Wireless APs
	udp {
		port => 557
		type => syslog_meraki_ap_events
	}
	udp {
		port => 558
		type => syslog_meraki_ap_flows
	}
	udp {
		port => 559
		type => syslog_meraki_ap_url
	}
	
	# Synology NAS "NEST"
	udp {
		port => 560
		type => syslog_synology_rackstation
	}
}


############################################ Filter ##############################################
#Filters are specified to filter out the events. Filtering is done via pattern matching. You have range of option to specify  
#the filter. More details about the filter is under filter section in : http://www.logstash.net/docs/1.1.9/
#Multiline filter will combine the multiple lines in the event and make it as one event.
# Grok Debugger ( http://grokdebug.herokuapp.com )

#  @timestamp
#  @version

#  @client_ip		<- src_ip OR dst_ip
#  @client_net_port
#  @client_mac
#  @client_user		<- user, username
#  @server_ip
#  @server_port
#  @server_mac
#  @server_mac

#  _id
#  _index
#  _type

#  dst_ip
#  dst_port
#  dst_mac
#  request
#  request_host
#  request_meth
#  request_path
#  request_proto
#  src_ip
#  src_mac
#  src_port

#  action

#  user
#  username
#  user_ldap      # distinguishedName
#  user_group
#  user_group_ldap 

#  host
#  host_title
#  message
#  message_raw
#  port
#  syslog_facility
#  syslog_facility_code
#  syslog_pri
#  syslog_severity
#  syslog_severity_code
#  timestamp_unix
#  tags
#  type

filter {
	
	# Execution Commands
	if [type] == "exec_snmp_sw_noc_1" {
		grok {
			break_on_match => false
			
			# Custom Pattens
# 			patterns_dir => "/volume1/active_system/logstash/patterns/" # directory to custom paterns ( example: /volume1/active_system/logstash/patterns/austin-patterns )
			
			# IF-MIB::ifInNUcastPkts.50 = Counter32: 1439837
			# ^[a-zA-Z0-9-]*::ifInNUcastPkts.50 = [a-zA-Z0-9-]*: %{BASE10NUM:ifInNUcastPkts.50.int:int}
			match => { "message" => "[a-zA-Z0-9-]*::ifInNUcastPkts.50 = [a-zA-Z0-9-]*: %{BASE10NUM:_num_ifInNUcastPkts_50_int:int}" }  # Works
			match => { "message" => "[a-zA-Z0-9-]*::ifInNUcastPkts.49 = [a-zA-Z0-9-]*: %{BASE10NUM:_num_ifInNUcastPkts.49.int:int}" }  # Works
		}
# 		mutate { add_field => { "message_raw" => "%{message}" } }
		mutate {
			gsub => [  # Remove uneeded data from message.
				"message", "^[a-zA-Z0-9-]*::", "",
				"message", "= [a-zA-Z0-9-]*: ", ""
				
			]
		}
		kv {  # This filter helps automatically parse messages (or specific event fields) which are of the 'foo=bar' variety.
# 			add_field => ... # hash (optional), default: {}
			add_tag => "snmp" # array (optional), default: []
# 			default_keys => ... # hash (optional), default: {}
# 			exclude_keys => ... # array (optional), default: []
			field_split => "\n" # string (optional), default: " "
# 			include_keys => ... # array (optional), default: []
			prefix => "snmp." # string (optional), default: ""
# 			remove_field => ... # array (optional), default: []
# 			remove_tag => ... # array (optional), default: []
			source => "message" # string (optional), default: "message"
# 			target => ... # string (optional)
# 			trim => ... # string (optional)
# 			trimkey => ... # string (optional)
			value_split => " " # string (optional), default: "="
		}
		mutate {
			replace => [ "message", "%{snmp.sysDescr.0}: %{snmp.sysName.0}" ]  # add_field
# 			remove_field => [ "message" ]

			
			# Bash Command to make more:
			# SNMP_NAME="ifHCInBroadcastPkts"
			# echo "rename => [ \"snmp.${SNMP_NAME}.1\", \"snmp.01.${SNMP_NAME}\","; for ((i=2;i<9;i+=1)); do echo "\t\t\t\"snmp.${SNMP_NAME}.$i\", \"snmp.$(printf "%02d" $i).${SNMP_NAME}\","; done; echo "\t\t\t\"snmp.${SNMP_NAME}.$i\", \"snmp.$(printf "%02d" $i).${SNMP_NAME}\" ]"
			# echo "convert => [ \"snmp.01.${SNMP_NAME}\", \"integer\","; for ((i=2;i<52;i+=1)); do echo "\t\t\t\"snmp.$(printf "%02d" $i).${SNMP_NAME}\", \"integer\","; done; echo "\t\t\t\"snmp.$(printf "%02d" $i).${SNMP_NAME}\", \"integer\" ]"
			
			# snmp.ifHCInBroadcastPkts
			rename => [ "snmp.ifHCInBroadcastPkts.1", "snmp.01.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.2", "snmp.02.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.3", "snmp.03.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.4", "snmp.04.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.5", "snmp.05.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.6", "snmp.06.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.7", "snmp.07.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.8", "snmp.08.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.9", "snmp.09.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.10", "snmp.10.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.11", "snmp.11.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.12", "snmp.12.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.13", "snmp.13.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.14", "snmp.14.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.15", "snmp.15.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.16", "snmp.16.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.17", "snmp.17.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.18", "snmp.18.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.19", "snmp.19.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.20", "snmp.20.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.21", "snmp.21.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.22", "snmp.22.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.23", "snmp.23.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.24", "snmp.24.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.25", "snmp.25.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.26", "snmp.26.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.27", "snmp.27.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.28", "snmp.28.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.29", "snmp.29.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.30", "snmp.30.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.31", "snmp.31.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.32", "snmp.32.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.33", "snmp.33.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.34", "snmp.34.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.35", "snmp.35.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.36", "snmp.36.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.37", "snmp.37.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.38", "snmp.38.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.39", "snmp.39.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.40", "snmp.40.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.41", "snmp.41.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.42", "snmp.42.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.43", "snmp.43.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.44", "snmp.44.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.45", "snmp.45.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.46", "snmp.46.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.47", "snmp.47.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.48", "snmp.48.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.49", "snmp.49.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.50", "snmp.50.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.51", "snmp.51.ifHCInBroadcastPkts", "snmp.ifHCInBroadcastPkts.52", "snmp.52.ifHCInBroadcastPkts" ]
			convert => [ "snmp.01.ifHCInBroadcastPkts", "integer", "snmp.02.ifHCInBroadcastPkts", "integer", "snmp.03.ifHCInBroadcastPkts", "integer", "snmp.04.ifHCInBroadcastPkts", "integer", "snmp.05.ifHCInBroadcastPkts", "integer", "snmp.06.ifHCInBroadcastPkts", "integer", "snmp.07.ifHCInBroadcastPkts", "integer", "snmp.08.ifHCInBroadcastPkts", "integer", "snmp.09.ifHCInBroadcastPkts", "integer", "snmp.10.ifHCInBroadcastPkts", "integer", "snmp.11.ifHCInBroadcastPkts", "integer", "snmp.12.ifHCInBroadcastPkts", "integer", "snmp.13.ifHCInBroadcastPkts", "integer", "snmp.14.ifHCInBroadcastPkts", "integer", "snmp.15.ifHCInBroadcastPkts", "integer", "snmp.16.ifHCInBroadcastPkts", "integer", "snmp.17.ifHCInBroadcastPkts", "integer", "snmp.18.ifHCInBroadcastPkts", "integer", "snmp.19.ifHCInBroadcastPkts", "integer", "snmp.20.ifHCInBroadcastPkts", "integer", "snmp.21.ifHCInBroadcastPkts", "integer", "snmp.22.ifHCInBroadcastPkts", "integer", "snmp.23.ifHCInBroadcastPkts", "integer", "snmp.24.ifHCInBroadcastPkts", "integer", "snmp.25.ifHCInBroadcastPkts", "integer", "snmp.26.ifHCInBroadcastPkts", "integer", "snmp.27.ifHCInBroadcastPkts", "integer", "snmp.28.ifHCInBroadcastPkts", "integer", "snmp.29.ifHCInBroadcastPkts", "integer", "snmp.30.ifHCInBroadcastPkts", "integer", "snmp.31.ifHCInBroadcastPkts", "integer", "snmp.32.ifHCInBroadcastPkts", "integer", "snmp.33.ifHCInBroadcastPkts", "integer", "snmp.34.ifHCInBroadcastPkts", "integer", "snmp.35.ifHCInBroadcastPkts", "integer", "snmp.36.ifHCInBroadcastPkts", "integer", "snmp.37.ifHCInBroadcastPkts", "integer", "snmp.38.ifHCInBroadcastPkts", "integer", "snmp.39.ifHCInBroadcastPkts", "integer", "snmp.40.ifHCInBroadcastPkts", "integer", "snmp.41.ifHCInBroadcastPkts", "integer", "snmp.42.ifHCInBroadcastPkts", "integer", "snmp.43.ifHCInBroadcastPkts", "integer", "snmp.44.ifHCInBroadcastPkts", "integer", "snmp.45.ifHCInBroadcastPkts", "integer", "snmp.46.ifHCInBroadcastPkts", "integer", "snmp.47.ifHCInBroadcastPkts", "integer", "snmp.48.ifHCInBroadcastPkts", "integer", "snmp.49.ifHCInBroadcastPkts", "integer", "snmp.50.ifHCInBroadcastPkts", "integer", "snmp.51.ifHCInBroadcastPkts", "integer", "snmp.52.ifHCInBroadcastPkts", "integer" ]
			
			# snmp.ifHCInMulticastPkts
			rename => [ "snmp.ifHCInMulticastPkts.1", "snmp.01.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.2", "snmp.02.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.3", "snmp.03.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.4", "snmp.04.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.5", "snmp.05.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.6", "snmp.06.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.7", "snmp.07.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.8", "snmp.08.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.9", "snmp.09.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.10", "snmp.10.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.11", "snmp.11.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.12", "snmp.12.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.13", "snmp.13.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.14", "snmp.14.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.15", "snmp.15.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.16", "snmp.16.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.17", "snmp.17.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.18", "snmp.18.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.19", "snmp.19.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.20", "snmp.20.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.21", "snmp.21.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.22", "snmp.22.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.23", "snmp.23.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.24", "snmp.24.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.25", "snmp.25.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.26", "snmp.26.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.27", "snmp.27.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.28", "snmp.28.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.29", "snmp.29.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.30", "snmp.30.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.31", "snmp.31.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.32", "snmp.32.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.33", "snmp.33.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.34", "snmp.34.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.35", "snmp.35.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.36", "snmp.36.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.37", "snmp.37.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.38", "snmp.38.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.39", "snmp.39.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.40", "snmp.40.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.41", "snmp.41.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.42", "snmp.42.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.43", "snmp.43.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.44", "snmp.44.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.45", "snmp.45.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.46", "snmp.46.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.47", "snmp.47.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.48", "snmp.48.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.49", "snmp.49.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.50", "snmp.50.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.51", "snmp.51.ifHCInMulticastPkts", "snmp.ifHCInMulticastPkts.52", "snmp.52.ifHCInMulticastPkts" ]
			convert => [ "snmp.01.ifHCInMulticastPkts", "integer", "snmp.02.ifHCInMulticastPkts", "integer", "snmp.03.ifHCInMulticastPkts", "integer", "snmp.04.ifHCInMulticastPkts", "integer", "snmp.05.ifHCInMulticastPkts", "integer", "snmp.06.ifHCInMulticastPkts", "integer", "snmp.07.ifHCInMulticastPkts", "integer", "snmp.08.ifHCInMulticastPkts", "integer", "snmp.09.ifHCInMulticastPkts", "integer", "snmp.10.ifHCInMulticastPkts", "integer", "snmp.11.ifHCInMulticastPkts", "integer", "snmp.12.ifHCInMulticastPkts", "integer", "snmp.13.ifHCInMulticastPkts", "integer", "snmp.14.ifHCInMulticastPkts", "integer", "snmp.15.ifHCInMulticastPkts", "integer", "snmp.16.ifHCInMulticastPkts", "integer", "snmp.17.ifHCInMulticastPkts", "integer", "snmp.18.ifHCInMulticastPkts", "integer", "snmp.19.ifHCInMulticastPkts", "integer", "snmp.20.ifHCInMulticastPkts", "integer", "snmp.21.ifHCInMulticastPkts", "integer", "snmp.22.ifHCInMulticastPkts", "integer", "snmp.23.ifHCInMulticastPkts", "integer", "snmp.24.ifHCInMulticastPkts", "integer", "snmp.25.ifHCInMulticastPkts", "integer", "snmp.26.ifHCInMulticastPkts", "integer", "snmp.27.ifHCInMulticastPkts", "integer", "snmp.28.ifHCInMulticastPkts", "integer", "snmp.29.ifHCInMulticastPkts", "integer", "snmp.30.ifHCInMulticastPkts", "integer", "snmp.31.ifHCInMulticastPkts", "integer", "snmp.32.ifHCInMulticastPkts", "integer", "snmp.33.ifHCInMulticastPkts", "integer", "snmp.34.ifHCInMulticastPkts", "integer", "snmp.35.ifHCInMulticastPkts", "integer", "snmp.36.ifHCInMulticastPkts", "integer", "snmp.37.ifHCInMulticastPkts", "integer", "snmp.38.ifHCInMulticastPkts", "integer", "snmp.39.ifHCInMulticastPkts", "integer", "snmp.40.ifHCInMulticastPkts", "integer", "snmp.41.ifHCInMulticastPkts", "integer", "snmp.42.ifHCInMulticastPkts", "integer", "snmp.43.ifHCInMulticastPkts", "integer", "snmp.44.ifHCInMulticastPkts", "integer", "snmp.45.ifHCInMulticastPkts", "integer", "snmp.46.ifHCInMulticastPkts", "integer", "snmp.47.ifHCInMulticastPkts", "integer", "snmp.48.ifHCInMulticastPkts", "integer", "snmp.49.ifHCInMulticastPkts", "integer", "snmp.50.ifHCInMulticastPkts", "integer", "snmp.51.ifHCInMulticastPkts", "integer", "snmp.52.ifHCInMulticastPkts", "integer" ]
			
			# snmp.ifHCInOctets
			rename => [ "snmp.ifHCInOctets.1", "snmp.01.ifHCInOctets", "snmp.ifHCInOctets.2", "snmp.02.ifHCInOctets", "snmp.ifHCInOctets.3", "snmp.03.ifHCInOctets", "snmp.ifHCInOctets.4", "snmp.04.ifHCInOctets", "snmp.ifHCInOctets.5", "snmp.05.ifHCInOctets", "snmp.ifHCInOctets.6", "snmp.06.ifHCInOctets", "snmp.ifHCInOctets.7", "snmp.07.ifHCInOctets", "snmp.ifHCInOctets.8", "snmp.08.ifHCInOctets", "snmp.ifHCInOctets.9", "snmp.09.ifHCInOctets", "snmp.ifHCInOctets.10", "snmp.10.ifHCInOctets", "snmp.ifHCInOctets.11", "snmp.11.ifHCInOctets", "snmp.ifHCInOctets.12", "snmp.12.ifHCInOctets", "snmp.ifHCInOctets.13", "snmp.13.ifHCInOctets", "snmp.ifHCInOctets.14", "snmp.14.ifHCInOctets", "snmp.ifHCInOctets.15", "snmp.15.ifHCInOctets", "snmp.ifHCInOctets.16", "snmp.16.ifHCInOctets", "snmp.ifHCInOctets.17", "snmp.17.ifHCInOctets", "snmp.ifHCInOctets.18", "snmp.18.ifHCInOctets", "snmp.ifHCInOctets.19", "snmp.19.ifHCInOctets", "snmp.ifHCInOctets.20", "snmp.20.ifHCInOctets", "snmp.ifHCInOctets.21", "snmp.21.ifHCInOctets", "snmp.ifHCInOctets.22", "snmp.22.ifHCInOctets", "snmp.ifHCInOctets.23", "snmp.23.ifHCInOctets", "snmp.ifHCInOctets.24", "snmp.24.ifHCInOctets", "snmp.ifHCInOctets.25", "snmp.25.ifHCInOctets", "snmp.ifHCInOctets.26", "snmp.26.ifHCInOctets", "snmp.ifHCInOctets.27", "snmp.27.ifHCInOctets", "snmp.ifHCInOctets.28", "snmp.28.ifHCInOctets", "snmp.ifHCInOctets.29", "snmp.29.ifHCInOctets", "snmp.ifHCInOctets.30", "snmp.30.ifHCInOctets", "snmp.ifHCInOctets.31", "snmp.31.ifHCInOctets", "snmp.ifHCInOctets.32", "snmp.32.ifHCInOctets", "snmp.ifHCInOctets.33", "snmp.33.ifHCInOctets", "snmp.ifHCInOctets.34", "snmp.34.ifHCInOctets", "snmp.ifHCInOctets.35", "snmp.35.ifHCInOctets", "snmp.ifHCInOctets.36", "snmp.36.ifHCInOctets", "snmp.ifHCInOctets.37", "snmp.37.ifHCInOctets", "snmp.ifHCInOctets.38", "snmp.38.ifHCInOctets", "snmp.ifHCInOctets.39", "snmp.39.ifHCInOctets", "snmp.ifHCInOctets.40", "snmp.40.ifHCInOctets", "snmp.ifHCInOctets.41", "snmp.41.ifHCInOctets", "snmp.ifHCInOctets.42", "snmp.42.ifHCInOctets", "snmp.ifHCInOctets.43", "snmp.43.ifHCInOctets", "snmp.ifHCInOctets.44", "snmp.44.ifHCInOctets", "snmp.ifHCInOctets.45", "snmp.45.ifHCInOctets", "snmp.ifHCInOctets.46", "snmp.46.ifHCInOctets", "snmp.ifHCInOctets.47", "snmp.47.ifHCInOctets", "snmp.ifHCInOctets.48", "snmp.48.ifHCInOctets", "snmp.ifHCInOctets.49", "snmp.49.ifHCInOctets", "snmp.ifHCInOctets.50", "snmp.50.ifHCInOctets", "snmp.ifHCInOctets.51", "snmp.51.ifHCInOctets", "snmp.ifHCInOctets.52", "snmp.52.ifHCInOctets" ]
			convert => [ "snmp.01.ifHCInOctets", "integer", "snmp.02.ifHCInOctets", "integer", "snmp.03.ifHCInOctets", "integer", "snmp.04.ifHCInOctets", "integer", "snmp.05.ifHCInOctets", "integer", "snmp.06.ifHCInOctets", "integer", "snmp.07.ifHCInOctets", "integer", "snmp.08.ifHCInOctets", "integer", "snmp.09.ifHCInOctets", "integer", "snmp.10.ifHCInOctets", "integer", "snmp.11.ifHCInOctets", "integer", "snmp.12.ifHCInOctets", "integer", "snmp.13.ifHCInOctets", "integer", "snmp.14.ifHCInOctets", "integer", "snmp.15.ifHCInOctets", "integer", "snmp.16.ifHCInOctets", "integer", "snmp.17.ifHCInOctets", "integer", "snmp.18.ifHCInOctets", "integer", "snmp.19.ifHCInOctets", "integer", "snmp.20.ifHCInOctets", "integer", "snmp.21.ifHCInOctets", "integer", "snmp.22.ifHCInOctets", "integer", "snmp.23.ifHCInOctets", "integer", "snmp.24.ifHCInOctets", "integer", "snmp.25.ifHCInOctets", "integer", "snmp.26.ifHCInOctets", "integer", "snmp.27.ifHCInOctets", "integer", "snmp.28.ifHCInOctets", "integer", "snmp.29.ifHCInOctets", "integer", "snmp.30.ifHCInOctets", "integer", "snmp.31.ifHCInOctets", "integer", "snmp.32.ifHCInOctets", "integer", "snmp.33.ifHCInOctets", "integer", "snmp.34.ifHCInOctets", "integer", "snmp.35.ifHCInOctets", "integer", "snmp.36.ifHCInOctets", "integer", "snmp.37.ifHCInOctets", "integer", "snmp.38.ifHCInOctets", "integer", "snmp.39.ifHCInOctets", "integer", "snmp.40.ifHCInOctets", "integer", "snmp.41.ifHCInOctets", "integer", "snmp.42.ifHCInOctets", "integer", "snmp.43.ifHCInOctets", "integer", "snmp.44.ifHCInOctets", "integer", "snmp.45.ifHCInOctets", "integer", "snmp.46.ifHCInOctets", "integer", "snmp.47.ifHCInOctets", "integer", "snmp.48.ifHCInOctets", "integer", "snmp.49.ifHCInOctets", "integer", "snmp.50.ifHCInOctets", "integer", "snmp.51.ifHCInOctets", "integer", "snmp.52.ifHCInOctets", "integer" ]
			
			# snmp.ifHCInUcastPkts
			rename => [ "snmp.ifHCInUcastPkts.1", "snmp.01.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.2", "snmp.02.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.3", "snmp.03.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.4", "snmp.04.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.5", "snmp.05.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.6", "snmp.06.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.7", "snmp.07.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.8", "snmp.08.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.9", "snmp.09.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.10", "snmp.10.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.11", "snmp.11.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.12", "snmp.12.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.13", "snmp.13.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.14", "snmp.14.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.15", "snmp.15.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.16", "snmp.16.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.17", "snmp.17.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.18", "snmp.18.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.19", "snmp.19.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.20", "snmp.20.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.21", "snmp.21.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.22", "snmp.22.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.23", "snmp.23.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.24", "snmp.24.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.25", "snmp.25.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.26", "snmp.26.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.27", "snmp.27.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.28", "snmp.28.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.29", "snmp.29.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.30", "snmp.30.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.31", "snmp.31.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.32", "snmp.32.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.33", "snmp.33.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.34", "snmp.34.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.35", "snmp.35.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.36", "snmp.36.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.37", "snmp.37.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.38", "snmp.38.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.39", "snmp.39.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.40", "snmp.40.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.41", "snmp.41.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.42", "snmp.42.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.43", "snmp.43.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.44", "snmp.44.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.45", "snmp.45.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.46", "snmp.46.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.47", "snmp.47.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.48", "snmp.48.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.49", "snmp.49.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.50", "snmp.50.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.51", "snmp.51.ifHCInUcastPkts", "snmp.ifHCInUcastPkts.52", "snmp.52.ifHCInUcastPkts" ]
			convert => [ "snmp.01.ifHCInUcastPkts", "integer", "snmp.02.ifHCInUcastPkts", "integer", "snmp.03.ifHCInUcastPkts", "integer", "snmp.04.ifHCInUcastPkts", "integer", "snmp.05.ifHCInUcastPkts", "integer", "snmp.06.ifHCInUcastPkts", "integer", "snmp.07.ifHCInUcastPkts", "integer", "snmp.08.ifHCInUcastPkts", "integer", "snmp.09.ifHCInUcastPkts", "integer", "snmp.10.ifHCInUcastPkts", "integer", "snmp.11.ifHCInUcastPkts", "integer", "snmp.12.ifHCInUcastPkts", "integer", "snmp.13.ifHCInUcastPkts", "integer", "snmp.14.ifHCInUcastPkts", "integer", "snmp.15.ifHCInUcastPkts", "integer", "snmp.16.ifHCInUcastPkts", "integer", "snmp.17.ifHCInUcastPkts", "integer", "snmp.18.ifHCInUcastPkts", "integer", "snmp.19.ifHCInUcastPkts", "integer", "snmp.20.ifHCInUcastPkts", "integer", "snmp.21.ifHCInUcastPkts", "integer", "snmp.22.ifHCInUcastPkts", "integer", "snmp.23.ifHCInUcastPkts", "integer", "snmp.24.ifHCInUcastPkts", "integer", "snmp.25.ifHCInUcastPkts", "integer", "snmp.26.ifHCInUcastPkts", "integer", "snmp.27.ifHCInUcastPkts", "integer", "snmp.28.ifHCInUcastPkts", "integer", "snmp.29.ifHCInUcastPkts", "integer", "snmp.30.ifHCInUcastPkts", "integer", "snmp.31.ifHCInUcastPkts", "integer", "snmp.32.ifHCInUcastPkts", "integer", "snmp.33.ifHCInUcastPkts", "integer", "snmp.34.ifHCInUcastPkts", "integer", "snmp.35.ifHCInUcastPkts", "integer", "snmp.36.ifHCInUcastPkts", "integer", "snmp.37.ifHCInUcastPkts", "integer", "snmp.38.ifHCInUcastPkts", "integer", "snmp.39.ifHCInUcastPkts", "integer", "snmp.40.ifHCInUcastPkts", "integer", "snmp.41.ifHCInUcastPkts", "integer", "snmp.42.ifHCInUcastPkts", "integer", "snmp.43.ifHCInUcastPkts", "integer", "snmp.44.ifHCInUcastPkts", "integer", "snmp.45.ifHCInUcastPkts", "integer", "snmp.46.ifHCInUcastPkts", "integer", "snmp.47.ifHCInUcastPkts", "integer", "snmp.48.ifHCInUcastPkts", "integer", "snmp.49.ifHCInUcastPkts", "integer", "snmp.50.ifHCInUcastPkts", "integer", "snmp.51.ifHCInUcastPkts", "integer", "snmp.52.ifHCInUcastPkts", "integer" ]
			
			# snmp.ifHCOutBroadcastPkts
			rename => [ "snmp.ifHCOutBroadcastPkts.1", "snmp.01.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.2", "snmp.02.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.3", "snmp.03.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.4", "snmp.04.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.5", "snmp.05.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.6", "snmp.06.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.7", "snmp.07.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.8", "snmp.08.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.9", "snmp.09.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.10", "snmp.10.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.11", "snmp.11.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.12", "snmp.12.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.13", "snmp.13.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.14", "snmp.14.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.15", "snmp.15.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.16", "snmp.16.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.17", "snmp.17.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.18", "snmp.18.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.19", "snmp.19.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.20", "snmp.20.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.21", "snmp.21.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.22", "snmp.22.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.23", "snmp.23.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.24", "snmp.24.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.25", "snmp.25.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.26", "snmp.26.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.27", "snmp.27.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.28", "snmp.28.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.29", "snmp.29.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.30", "snmp.30.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.31", "snmp.31.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.32", "snmp.32.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.33", "snmp.33.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.34", "snmp.34.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.35", "snmp.35.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.36", "snmp.36.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.37", "snmp.37.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.38", "snmp.38.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.39", "snmp.39.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.40", "snmp.40.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.41", "snmp.41.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.42", "snmp.42.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.43", "snmp.43.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.44", "snmp.44.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.45", "snmp.45.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.46", "snmp.46.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.47", "snmp.47.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.48", "snmp.48.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.49", "snmp.49.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.50", "snmp.50.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.51", "snmp.51.ifHCOutBroadcastPkts", "snmp.ifHCOutBroadcastPkts.52", "snmp.52.ifHCOutBroadcastPkts" ]
			convert => [ "snmp.01.ifHCOutBroadcastPkts", "integer", "snmp.02.ifHCOutBroadcastPkts", "integer", "snmp.03.ifHCOutBroadcastPkts", "integer", "snmp.04.ifHCOutBroadcastPkts", "integer", "snmp.05.ifHCOutBroadcastPkts", "integer", "snmp.06.ifHCOutBroadcastPkts", "integer", "snmp.07.ifHCOutBroadcastPkts", "integer", "snmp.08.ifHCOutBroadcastPkts", "integer", "snmp.09.ifHCOutBroadcastPkts", "integer", "snmp.10.ifHCOutBroadcastPkts", "integer", "snmp.11.ifHCOutBroadcastPkts", "integer", "snmp.12.ifHCOutBroadcastPkts", "integer", "snmp.13.ifHCOutBroadcastPkts", "integer", "snmp.14.ifHCOutBroadcastPkts", "integer", "snmp.15.ifHCOutBroadcastPkts", "integer", "snmp.16.ifHCOutBroadcastPkts", "integer", "snmp.17.ifHCOutBroadcastPkts", "integer", "snmp.18.ifHCOutBroadcastPkts", "integer", "snmp.19.ifHCOutBroadcastPkts", "integer", "snmp.20.ifHCOutBroadcastPkts", "integer", "snmp.21.ifHCOutBroadcastPkts", "integer", "snmp.22.ifHCOutBroadcastPkts", "integer", "snmp.23.ifHCOutBroadcastPkts", "integer", "snmp.24.ifHCOutBroadcastPkts", "integer", "snmp.25.ifHCOutBroadcastPkts", "integer", "snmp.26.ifHCOutBroadcastPkts", "integer", "snmp.27.ifHCOutBroadcastPkts", "integer", "snmp.28.ifHCOutBroadcastPkts", "integer", "snmp.29.ifHCOutBroadcastPkts", "integer", "snmp.30.ifHCOutBroadcastPkts", "integer", "snmp.31.ifHCOutBroadcastPkts", "integer", "snmp.32.ifHCOutBroadcastPkts", "integer", "snmp.33.ifHCOutBroadcastPkts", "integer", "snmp.34.ifHCOutBroadcastPkts", "integer", "snmp.35.ifHCOutBroadcastPkts", "integer", "snmp.36.ifHCOutBroadcastPkts", "integer", "snmp.37.ifHCOutBroadcastPkts", "integer", "snmp.38.ifHCOutBroadcastPkts", "integer", "snmp.39.ifHCOutBroadcastPkts", "integer", "snmp.40.ifHCOutBroadcastPkts", "integer", "snmp.41.ifHCOutBroadcastPkts", "integer", "snmp.42.ifHCOutBroadcastPkts", "integer", "snmp.43.ifHCOutBroadcastPkts", "integer", "snmp.44.ifHCOutBroadcastPkts", "integer", "snmp.45.ifHCOutBroadcastPkts", "integer", "snmp.46.ifHCOutBroadcastPkts", "integer", "snmp.47.ifHCOutBroadcastPkts", "integer", "snmp.48.ifHCOutBroadcastPkts", "integer", "snmp.49.ifHCOutBroadcastPkts", "integer", "snmp.50.ifHCOutBroadcastPkts", "integer", "snmp.51.ifHCOutBroadcastPkts", "integer", "snmp.52.ifHCOutBroadcastPkts", "integer" ]
		}
	}
	
	# -----------------------------------------------------------------------------------------------------
	
	# Meraki Security Applicance ( syslog_meraki_sa_events )
	if [type] == "syslog_meraki_sa_events" {
		grok {
			# Custom Pattens
			patterns_dir => "/volume1/active_system/logstash/patterns/" # directory to custom paterns ( example: /volume1/active_system/logstash/patterns/austin-patterns )
			
			# <134>1 1392793111.469320128 Meraki_Security_Applicance events dhcp lease of ip 172.16.37.220 from server mac 00:18:0A:02:85:88 for client mac 00:18:0A:76:F9:79 from router 172.16.1.2 on subnet 255.255.0.0 with dns 172.16.1.200, 172.16.1.1
# 			match => { "message" => "events %{WORD:action} lease of ip %{IP:src_ip} from server mac %{MAC:dst_mac} for client mac %{MAC:src_mac} from router %{IP:dst_ip} on subnet %{IP:scr_ip_sub} with dns %{IP:scr_ip_dns}, %{IP:scr_ip_dns}, %{IP:scr_ip_dns}, %{IP:scr_ip_dns}" }
# 			match => { "message" => "events %{WORD:action} lease of ip %{IP:src_ip} from server mac %{MAC:dst_mac} for client mac %{MAC:src_mac} from router %{IP:dst_ip} on subnet %{IP:scr_ip_sub} with dns %{IP:scr_ip_dns}, %{IP:scr_ip_dns}, %{IP:scr_ip_dns}" }
# 			match => { "message" => "events %{WORD:action} lease of ip %{IP:src_ip} from server mac %{MAC:dst_mac} for client mac %{MAC:src_mac} from router %{IP:dst_ip} on subnet %{IP:scr_ip_sub} with dns %{IP:scr_ip_dns}, %{IP:scr_ip_dns}" }
			match => { "message" => "events %{WORD:action} lease of ip %{IP:src_ip} from server mac %{MAC:dst_mac} for client mac %{MAC:src_mac} from router %{IP:dst_ip} on subnet %{IP:scr_ip_sub} with (?=.*?(?:dns %{IP:scr_ip_dns}(?:, %{IP:scr_ip_dns})?(?:, %{IP:scr_ip_dns})?(?:, %{IP:scr_ip_dns})?))" }
			
			# <134>1 1392792900.051011956 Meraki_Security_Applicance events authentication on 00:1E:0B:3E:42:DD for user TTobey as CN=Tami Tobey,OU=Teachers,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org with policy for group CN=Teachers,OU=Teachers,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org
			# <134>1 1392870429.788867070 Meraki_Security_Applicance events authentication on 90:B1:1C:79:1C:50 for user JWolfe as CN=Janet Wolfe,OU=Administration,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org with policy for group CN=Administration,OU=Administration,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org
			# <134>1 1392875022.027478864 Meraki_Security_Applicance events authentication on 00:0B:DB:73:F1:78 for user student as CN=Student Guest,OU=Students,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org with policy for group CN=Students,OU=Students,OU=Users - Domain,DC=eagles,DC=ocacademy,DC=org
			match => { "message" => "events %{WORD:action} on %{MAC:src_mac} for user %{USER:username} as %{GREEDYDATA:user_ldap} with policy for group %{GREEDYDATA:user_group_ldap}" }
			match => { "message" => "events %{WORD:action} on %{MAC:src_mac} for user %{USER:username} as %{GREEDYDATA:user_ldap}" }
			
			# <134>1 1392808395.669667263 Meraki_Security_Applicance events Site-to-site VPN: IPsec-SA established: ESP/Transport 24.249.102.115[4500]->70.168.64.32[4500] spi=120847356(0x733fbfc)
			match => { "message" => "events Site-to-site %{WORD:action}: IPsec-SA established: ESP/Transport %{IP:dst_ip}\[%{NUMBER:dst_port}\]->%{IP:src_ip}\[%{NUMBER:src_port}\] spi=%{NUMBER:spi}" }
			# <134>1 1392807945.925365388 Meraki_Security_Applicance events client_vpn_connect user id 'astaubin' local ip 192.168.251.122 connected from 70.168.64.32
			# <134>1 1392808392.258224600 Meraki_Security_Applicance events client_vpn_disconnect user id 'astaubin' local ip 192.168.251.122 connected from 70.168.64.32
			match => { "message" => "events %{WORD:action} user id '%{USER:username}' local ip %{IP:dst_ip} connected from %{IP:src_ip}" }
			
			# <134>1 1392859657.308826035 Meraki_Security_Applicance events content_filtering_block url='http://img2.imagesbn.com/p/2940043877833_p0_v2_s600_e404.png'; category0='User-defined Blacklist' server='174.76.226.93:80'
			# <134>1 1392859398.201435382 Meraki_Security_Applicance events content_filtering_block url='https://*.cloudmosa.com/...' category0='User-defined Blacklist' server='184.105.82.3:443'
			# <134>1 1392852837.708319483 Meraki_Security_Applicance events content_filtering_block url='http://q99.info/wp-content/uploads/2013/12/posted-the-wizard-saturday-july-48090.jpg'; category0='Proxy Avoidance and Anonymizers' server='67.215.65.130:80'
			match => { "message" => "events %{WORD:action} url='%{MERAKIURI:request}'(?:;)? category0='%{GREEDYDATA}' server='%{IP:dst_ip}:%{NUMBER:dst_port}'" }
		}
		grok {
			# Catch all Pattern
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} events %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "security_applicance"
			add_tag => "events"
			add_tag => "%{action}"
		}
		mutate {
			rename => [ "message", "message_raw" ]
# 			replace => [ "message", "%{message_new}" ]
# 			remove_field => "message_new"
			rename => [ "message_new", "message" ]
		}
	}
	
	# Meraki Security Applicance ( syslog_meraki_sa_flows )
	if [type] == "syslog_meraki_sa_flows" {
		grok {
			# <134>1 1392793163.700257235 Meraki_Security_Applicance flows src=17.173.254.223 dst=24.249.102.115 protocol=udp sport=16387 dport=1072 pattern: 1 all
			match => { "message" => "flows src=%{IP:src_ip} dst=%{IP:dst_ip} protocol=%{WORD:protocol} sport=%{NUMBER:src_port} dport=%{NUMBER:dst_port} pattern: %{GREEDYDATA:request}" }
			# <134>1 1392859863.393882545 Meraki_Security_Applicance flows src=172.16.4.21 dst=74.125.193.138 mac=00:18:0A:77:1B:D7 protocol=tcp sport=53336 dport=443 pattern: allow all
			match => { "message" => "flows src=%{IP:src_ip} dst=%{IP:dst_ip} mac=%{MAC:dst_mac} protocol=%{WORD:protocol} sport=%{NUMBER:src_port} dport=%{NUMBER:dst_port} pattern: %{GREEDYDATA:request}" }
		}
		grok {
			# Catch all Pattern
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} flows %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "security_applicance"
			add_tag => "flows"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			rename => [ "message_new", "message" ]
		}
	}
	
	# Meraki Security Applicance ( syslog_meraki_sa_url )
	if [type] == "syslog_meraki_sa_url" {
		grok {
			# Custom Pattens
			patterns_dir => "/volume1/active_system/logstash/patterns/" # directory to custom paterns ( example: /volume1/active_system/logstash/patterns/austin-patterns )
			
			# <134>1 1392339100.728804745 Meraki_Security_Applicance urls src=172.16.4.6:52436 dst=173.194.115.45:80 mac=00:18:0A:77:1B:D7 request: GET http://testuser:testpassword@pagead2.googlesyndication.com/simgad/2675983589122411580
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} urls src=%{IP:src_ip}:%{BASE16NUM:src_port} dst=%{IP:dst_ip}:%{BASE16NUM:dst_port} mac=%{COMMONMAC:src_mac} request: %{WORD:request_meth} %{MERAKIURI:request}" }
			# <134>1 1392211198.356742547 Meraki_Security_Applicance urls src=172.16.4.3:41805 dst=74.50.59.38:443 mac=00:18:0A:82:4E:26 user=CN=Meraki\20Wireless\20Active\20Directory,OU=active_system,OU=Users\20-\20Domain,DC=eagles,DC=ocacademy,DC=org request: UNKNOWN http://dsfsd.sdf
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} urls src=%{IP:src_ip}:%{BASE16NUM:src_port} dst=%{IP:dst_ip}:%{BASE16NUM:dst_port} mac=%{COMMONMAC:src_mac} user=%{GREEDYDATA:user_ldap} request: %{WORD:request_meth} %{MERAKIURI:request}" }
			
			#add_field => [ "received_at", "%{timestamp_unix}" ]
			#add_field => [ "received_from", "%{device}" ]
			# Tags
			add_tag => "meraki"
			add_tag => "security_applicance"
			add_tag => "urls"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			replace => [ "message", "%{request}" ]
		}
	}
	
	# Meraki Security Applicance ( syslog_meraki_sa_ids )
	if [type] == "syslog_meraki_sa_ids" {
		grok {
			# <134>1 1392812405.977854011 Meraki_Security_Applicance ids-alerts signature=128:4:1 priority=2 timestamp=1392812405.977656 shost=03:99:9D:3B:F7:C5 direction=egress protocol=tcp/ip src=192.168.251.122:61724 dst=172.16.1.90:22 message: (spp_ssh) Protocol mismatch
# 			match => { "message" => "ids-alerts signature=%{GREEDYDATA:ids_sig} priority=%{NUMBER:ids_priority} timestamp=%{BASE16FLOAT} shost=%{MAC:src_mac} direction=%{GREEDYDATA:direction} protocol=%{WORD:ids_proto}%{GREEDYDATA}src=%{IP:src_ip}:%{NUMBER:src_port} dst=%{IP:dst_ip}:%{NUMBER:dst_port} message: %{GREEDYDATA:ids_sig_msg}" }
			# <134>1 1392813366.132711433 Meraki_Security_Applicance ids-alerts signature=129:3:1 priority=3 timestamp=1392813366.132460 dhost=00:1B:21:A2:73:C9 direction=ingress protocol=tcp/ip src=70.168.64.32:64697 dst=172.16.1.70:6690 message: Data sent on stream not accepting data
# 			match => { "message" => "ids-alerts signature=%{GREEDYDATA:ids_sig} priority=%{NUMBER:ids_priority} timestamp=%{BASE16FLOAT} dhost=%{MAC:dst_mac} direction=%{GREEDYDATA:direction} protocol=%{WORD:ids_proto}%{GREEDYDATA}src=%{IP:src_ip}:%{NUMBER:src_port} dst=%{IP:dst_ip}:%{NUMBER:dst_port} message: %{GREEDYDATA:ids_sig_msg}" }
			# <134>1 1392813416.274404494 Meraki_Security_Applicance ids-alerts signature=119:14:1 priority=2 timestamp=1392813416.114892 protocol=tcp/ip src=24.249.102.115:46865 dst=6.0.0.2:3128 message: (http_inspect) NON-RFC DEFINED CHAR
# 			match => { "message" => "ids-alerts signature=%{GREEDYDATA:ids_sig} priority=%{NUMBER:ids_priority} timestamp=%{BASE16FLOAT} protocol=%{WORD:ids_proto}%{GREEDYDATA}src=%{IP:src_ip}:%{NUMBER:src_port} dst=%{IP:dst_ip}:%{NUMBER:dst_port} message: %{GREEDYDATA:ids_sig_msg}" }
			# ids-alerts signature=129:5:1 priority=2 timestamp=1393626852.572503 dhost=04:15:52:5B:60:CC direction=ingress protocol=tcp/ip src=72.246.55.50:80 dst=172.16.25.241:50449 message: Bad segment, adjusted size <= 0
			# ids-alerts signature=123:8:1 priority=3 timestamp=1394061263.993136 shost=20:C9:D0:BC:66:A3 direction=egress protocol=34525 message: (spp_frag3) Fragmentation overlap
			match => { "message" => "ids-alerts signature=%{GREEDYDATA:ids_sig} priority=%{BASE10NUM:ids_priority} timestamp=%{BASE10NUM:timestamp_unix}(?: shost=%{MAC:src_mac})?(?: dhost=%{MAC:dst_mac})?(?: direction=%{WORD:direction})?(?: protocol=%{DATA:ids_proto}(?:/ip)?)?(?: src=%{IP:src_ip}:%{BASE10NUM:src_port})?(?: dst=%{IP:dst_ip}:%{BASE10NUM:dst_port})? message: %{GREEDYDATA:ids_sig_msg}" }
			
			# One Pattern to match them all
# 			match => { "message" => "" }
		}
		grok {
			# Catch all Pattern
# 			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} ids-alerts" }
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} ids-alerts %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "security_applicance"
			add_tag => "ids-alerts"
		}
		mutate {
			rename => [ "message", "message_raw" ]
# 			rename => [ "message_new", "message" ]
			
			replace => [ "message", "%{ids_sig_msg}" ]
			remove_field => "message_new"
		}
	}
	
	# -----------------------------------------------------------------------------------------------------
	
	# Meraki Switches ( syslog_meraki_sw_events )
	if [type] == "syslog_meraki_sw_events" {
		grok {
			# <134>1 1392877051.909494439 Media_Center events Port 2 changed STP role from disabled to designated
			# <134>1 1392877051.908767853 Media_Center events port 2 status changed from down to 100fdx
			# <134>1 1392876878.511315268 Media_Center events port 1 status changed from 100fdx to down
			# <134>1 1392877002.101527727 Media_Center events Port 2 changed STP role from disabled to designated
			# <134>1 1392876879.065897266 Media_Center events Port 21 changed STP role from designated to root
			# <134>1 1392876878.625600556 Media_Center events Port 21 changed STP role from root to disabled
			# <134>1 1394046037.506327273 Main_Office events Port 6 changed STP role from disabled to designated
			match => { "message" => "events [P|p]ort %{BASE10NUM:sw_port} %{GREEDYDATA:message_new}" }
			
			# Catch all Pattern
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} events %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "switch"
			add_tag => "events"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			rename => [ "message_new", "message" ]
		}
	}
	
	# -----------------------------------------------------------------------------------------------------
	
	# Meraki Wireless APs ( syslog_meraki_ap_events )


# You can achieve this will lookahead assertions
# 
# ^(?=.*\bmeat\b)(?=.*\bpasta\b)(?=.*\bdinner\b).+
# See it here on Regexr
# 
# (?=.*\bmeat\b) is a positive lookahead assertion, that ensures that \bmeat\b is somewhere in the string. Same for the other keywords and the .+ is then actually matching the whole string, but only if the assertions are true.
# 
# But it will match also on "dinner meat Foobar pasta"

	if [type] == "syslog_meraki_ap_events" {
		grok {
# 			# <134>1 0.0 Media_Center events type=disassociation radio='0' vap='5' reason='3' duration='100794.644171269' auth_neg_dur='0.080000395' last_auth_ago='123.297617966' is_wpa='1' full_conn='1.487007457' ip_resp='1.487007457' ip_src='172.31.31.254' http_resp='6.630033167' arp_resp='1.471007377' arp_src='172.31.31.254' dns_server='172.16.1.200' dns_req_rtt='0.000000' dns_resp='1.475007397' aid='1841158923'
# 			match => { "message" => "events type=%{WORD:action} radio='%{BASE10NUM:ap_radio}' vap='%{BASE10NUM:ap_vap}' reason='%{BASE10NUM:ap_reason}' duration='%{BASE10NUM:ap_duration}' auth_neg_dur='%{BASE10NUM:ap_auth_neg_dur}' last_auth_ago='%{BASE10NUM:ap_last_auth_ago}' is_wpa='%{BASE10NUM:ap_is_wpa}' full_conn='%{BASE10NUM:ap_full_conn}' ip_resp='%{BASE10NUM:ap_ip_resp}' ip_src='%{IP:src_ip}' http_resp='%{BASE10NUM:ap_}' arp_resp='%{BASE10NUM:ap_arp_resp}' arp_src='%{IP:ap_arp_src}' dns_server='%{IP:scr_ip_dns}' dns_req_rtt='%{BASE10NUM:ap_dns_req_rtt}' dns_resp='%{BASE10NUM:ap_dns_resp}' aid='%{BASE10NUM:ap_aid}'" }
# 			# <134>1 0.0 Media_Center events type=disassociation radio='0' vap='5' reason='3' duration='6304.354596777' auth_neg_dur='0.078000385' last_auth_ago='118.288592760' is_wpa='1' dns_req_rtt='0.000000' dns_resp='-10812.720192211' aid='846225579'
# 			# <134>1 0.0 Computer_Lab events type=association radio='0' vap='1' channel='11' rssi='19' aid='465225487'
# 			# <134>1 0.0 Media_Center events type=wpa_auth radio='0' vap='5' aid='1841158923'
# 			
			# One Pattern to match them all
			match => { "message" => "events type=%{WORD:action}(?=.*?(?:radio='%{BASE10NUM:ap_radio}))?(?=.*?(?:channel='%{BASE10NUM:ap_channel}))?(?=.*?(?:rssi='%{BASE10NUM:ap_rssi}))?(?=.*?(?:vap='%{BASE10NUM:ap_vap}))?(?=.*?(?:reason='%{BASE10NUM:ap_reason}))?(?=.*?(?:duration='%{BASE10NUM:ap_duration}))?(?=.*?(?:auth_neg_dur='%{BASE10NUM:ap_auth_neg_dur}))?(?=.*?(?:last_auth_ago='%{BASE10NUM:ap_last_auth_ago}))?(?=.*?(?:is_wpa='%{BASE10NUM:ap_is_wpa}))?(?=.*?(?:full_conn='%{BASE10NUM:ap_full_conn}))?(?=.*?(?:ip_resp='%{BASE10NUM:ap_isp_resp}))?(?=.*?(?:ip_src='%{IP:src_ip}))?(?=.*?(?:http_resp='%{BASE10NUM:ap_http_resp}))?(?=.*?(?:arp_resp='%{BASE10NUM:ap_arp_resp}))?(?=.*?(?:arp_src='%{IP:ap_arp_src}))?(?=.*?(?:dns_server='%{IP:src_ip_dns}))?(?=.*?(?:dns_req_rtt='%{BASE10NUM:ap_dns_req_rtt}))?(?=.*?(?:dns_resp='%{BASE10NUM:ap_dns_resp}))?(?=.*?(?:aid='%{BASE10NUM:ap_aid}))?" }
			# Working Pattern: (?=.*?(?:type=%{WORD}))?  # Match if possable, the '?' at the end can be removed to fail the match is the stament is not found.
			# Example Usage: (?=.*?(?:radio='%{BASE10NUM:ap_radio}))?
			# Example Usage: on subnet %{IP:scr_ip_sub} with (?=.*?(?:dns %{IP:scr_ip_dns}(?:, %{IP:scr_ip_dns})?(?:, %{IP:scr_ip_dns})?(?:, %{IP:scr_ip_dns})?))
		}
		grok {
			# Catch all Pattern
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} events %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "access_point"
			add_tag => "events"
			add_tag => "${action}"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			rename => [ "message_new", "message" ]
		}
	}

	
	# Meraki Wireless APs ( syslog_meraki_ap_flows )
	if [type] == "syslog_meraki_ap_flows" {
		grok {
			# <134>1 0.0 Elem_Room_8 flows allow src=172.16.25.249 dst=172.16.29.240 mac=20:C9:D0:BC:4D:2D protocol=tcp sport=56485 dport=445
			match => { "message" => "flows %{WORD:request} src=%{IP:src_ip} dst=%{IP:dst_ip} mac=%{MAC:src_mac} protocol=%{WORD:protocol} sport=%{NUMBER:src_port} dport=%{NUMBER:dst_port}" }
 			# <134>1 0.0 Room_16 flows allow src=0.0.0.0 dst=98.3.8.255 mac=60:03:08:9B:C3:E6 protocol=\\x80
			# <134>1 0.0 Room_14 flows allow src=0.0.0.0 dst=34.201.208.255 mac=20:C9:D0:BC:63:AD protocol=\\x80
			match => { "message" => "flows %{WORD:request} src=%{IP:src_ip} dst=%{IP:dst_ip} mac=%{MAC:src_mac} protocol=%{GREEDYDATA:protocol}" }
		}
		grok {
			# Catch all Pattern
			# <134>1 0.0 Portable_2 flows allow
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} flows %{GREEDYDATA:action}" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "access_point"
			add_tag => "flows"
		}
		mutate {
			rename => [ "message", "message_raw" ]
# 			rename => [ "message_new", "message" ]
			replace => [ "message", "%{action}" ]
		}
	}
	
	# Meraki Wireless APs ( syslog_meraki_ap_url )
	if [type] == "syslog_meraki_ap_url" {
		grok {
			# Custom Pattens
			patterns_dir => "/volume1/active_system/logstash/patterns/" # directory to custom paterns ( example: /volume1/active_system/logstash/patterns/austin-patterns )
			
			# <134>1 0.0 Room_20 urls src=10.12.223.177:54044 dst=69.171.248.65:443 mac=2C:30:68:F7:BA:D5 request: UNKNOWN https://orcart.facebook.com/...
			# <134>1 0.0 Room_16 urls src=172.16.38.238:57298 dst=74.125.193.120:80 mac=68:A8:6D:78:93:23 request: GET http://www.gstatic.com/bg/ox7Cf-pCB1pSFcek-ptPALGKH6uK4nYCWuj6RoQcsyI.js
			match => { "message" => "urls src=%{IP:src_ip}:%{NUMBER:src_port} dst=%{IP:dst_ip}:%{NUMBER:dst_port} mac=%{MAC:dst_mac} request: %{WORD:request_meth} %{MERAKIURI:request}" }
		}
		grok {
			# Catch all Pattern
# 			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} urls %{GREEDYDATA:message_new}" }
			match => { "message" => "^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} urls" }
			
			# Tags
			add_tag => "meraki"
			add_tag => "access_point"
			add_tag => "urls"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			replace => [ "message", "%{request}" ]
# 			remove_field => "message_new"
		}
	}
	
	# -----------------------------------------------------------------------------------------------------
	
	# Synology NAS "NEST" ( syslog_synology_rackstation )
	if [type] == "syslog_synology_rackstation" {
		# <14>Feb 18 16:48:58 Nest System Test message from Synology Syslog Client from (192.168.10.1)
		# <14>Mar 3 21:10:12 Nest System admin:	Enabled auto block service.
		# <14>Mar 3 21:05:50 Nest System admin:	SSH service was stopped.
		# <11>Mar 3 00:00:04 Nest Backup SYSTEM:	Destination is not on-line.
		
		# <14>Mar 4 11:23:27 Nest System EAGLES\AStAubin:	User [EAGLES\AStAubin] logged in from [70.168.64.32]
		grok { match => { "message" => "from \[(%{HOSTNAME:scr_host}\(IP:%{IP:scr_ip}\)|%{IP:scr_ip})\]" } }

		# <14>Mar 2 13:46:14 Nest System SYSTEM:	User [EAGLES\astaubin] failed to log in.
		# <14>Mar 3 21:03:26 Nest System admin:	User [admin] logged in from [192.168.251.122]
		# <14>Feb 26 10:16:45 Nest System admin:	Password of the user [backups] was changed.
		# <14>Mar 2 19:30:15 Nest System download:	User [download] logged in from [70.168.64.32]
		grok { match => { "message" => "[U|u]ser \[(?:%{WORD:user_domain}\\)?%{USERNAME:username}\]" } }
		
		# <14>Feb 26 10:05:11 Nest System admin:	Access right of the shared folder [homes] was set.
		grok { match => { "message" => "shared folder \[%{DATA:shared_folder}\]" } }
		
		# <14>Feb 25 19:17:40 Nest Connection EAGLES\jcogburn:	User [EAGLES\jcogburn] from [166.137.146.115] logged in successfully via [CloudStation].
		# <12>Feb 28 21:15:37 Nest Connection SYSTEM:	User [Adminsitrador] from [58.215.229.94] failed to log in via [FTP] due to authorization failure.
		grok { match => { "message" => "via \[%{DATA:package}\]" } }
		
		# <14>Mar 4 12:03:15 Nest WinFileService Event: read, Path: /Resources - Business Office/.databases/quickbooks/Oklahoma Christian Academy.qbw, File/Folder: File, Size: 10.14 MB, User: EAGLES\jcogburn, IP: 172.16.39.255
		# <14>Mar 4 12:03:14 Nest WinFileService Event: move, Path: /Resources - Business Office/.databases/quickbooks/QBf2a6d25926ff4ec6bde5c35248931b84.rgt -> /Resources - Business Office/#recycle/.databases/quickbooks/QBf2a6d25926ff4ec6bde5c35248931b84.rgt, File/Folder: File, Size: 36 Bytes, User...
		# <14>Feb 18 21:07:34 Nest Webdav Event: download, Path: /Web/test-2/index.php, File/Folder: File, Size: 2.75 KB, User: admin, IP: 70.168.64.32
		# <14>Mar  4 21:03:18 Nest FileStation Event: rename, Path: /home/Screenshot -> /home/Screenshots, File/Folder: Folder, Size: NA, User: admin, IP: 192.168.251.122
		grok { match => { "message" => "%{WORD:action}, Path: (%{GREEDYDATA:path_src} -> %{GREEDYDATA:path_dst}|%{GREEDYDATA:path_dst}), File/Folder: %{WORD:path_type}(?:, Size: (NA|%{BASE10NUM:file_size} %{WORD:file_size_unit}))?(?:, User: (?:%{WORD:user_domain}\\)?%{USERNAME:username})?(?:, IP: %{IP:src_ip})?" } }
		
		# <12>Mar 3 04:10:38 Nest Backup SYSTEM:	Local backup skip symbol link file [/volume1/Archives/General Device Backups/PATRIOT (Backup 2014-01-28)/Oklahoma Christian Academy - Macbooks/RenWeb_BETA.app/Contents/Resources/Wine.app/Contents/Resources/etc/fonts/conf.d/65-fonts-persian.conf].
		# <14>Mar 3 00:04:13 Nest Backup SYSTEM:	Local LUN Backup finished to backup task [LUN-4-WinServer2012-Accounting].
		# <14>Mar 3 04:12:16 Nest Backup SYSTEM:	Local Backup task [Main Backup] finished.
		# <14>Mar 3 04:00:02 Nest Backup SYSTEM:	Local Backup task [Main Backup] started.
		grok { match => { "message" => "task [%{DATA:task}]" } }
		
		# <14>Mar 2 12:31:52 Nest System admin:	Default gateway was changed from [172.16.1.2] to [172.16.1.2].
		grok { match => { "message" => "to [%{IP:dst_ip}]" } }
		
		# <14>Feb 25 08:50:38 Nest System admin:	Package [Syslog Server] has been successfully updated.
		grok { match => { "message" => "[P|p]ackage \[%{DATA:package}\]" } }
		
		# <14>Mar 2 01:00:05 Nest Connection EAGLES\staylor:	CIFS client [EAGLES\staylor] from [SUE-PC(IP:172.16.28.247)] accessed the shared folder [home].
		# <14>Feb 12 18:53:27 Nest Connection EAGLES\jcogburn:	AFP client [EAGLES\jcogburn] from [172.16.27.252] accessed the shared folder [Backups - Time Machine].
		# CIFS client [EAGLES\jin.lim] from [172.16.24.251(IP:172.16.24.251)] accessed the shared folder [Video].		
		#grok { match => { "message" => "\t%{WORD:protocol} client \[(?:%{WORD:user_domain}\\)?%{USERNAME:username}\]" } }
		grok { match => { "message" => "\t%{WORD:protocol} client \[(?:%{WORD}\\)?%{USERNAME}\]" } }
		
		grok {
			# Catch all Pattern
			match => { "message" => "^<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:host_title} %{WORD:service} (?:%{WORD:user_domain}\\)?%{USERNAME:username}:\t%{GREEDYDATA:message_new}" }
			match => { "message" => "^<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:host_title} %{WORD:service} %{GREEDYDATA:message_new}" }
			
			# Tags
			add_tag => "synology"
			add_tag => "nas"
		}
		mutate {
			rename => [ "message", "message_raw" ]
			rename => [ "message_new", "message" ]
		}
	}
	
	# -----------------------------------------------------------------------------------------------------
	
	# [ Globals ]
	# Get Users Name from user_ldap
	if [user_ldap] {
		mutate {
			gsub => [ "user_ldap", "\\20", " " ]  # replace all \20 with spaces
		}
		grok {
			match => { "user_ldap" => "CN=%{DATA:user}," }
			match => { "user_group_ldap" => "CN=%{DATA:user}," }
		}
	}
	# Get Users Group from user_group_ldap
	if [user_group_ldap] {
		grok { match => { "user_group_ldap" => "CN=%{DATA:user_group}," } }
	}
# 	# Username to lowercase
# 	if [user] {
# 		mutate {
# 			lowercase => [ "user" ]
# 			add_field => [ "@client_user", "%{user}" ]
# 		}
# 	}
	# Username to lowercase
	if [username] {
		mutate {
			lowercase => [ "username" ]
			add_field => [ "@client_user", "%{username}" ]
		}
	}
# 	# Add Tag from event if action is set
# 	if [action] {
# 		mutate { 
# 			add_tag => [ "%{action}" ]
# 		}
# 	}
# 	# TESTING
# 	if [message] {
# 		mutate { add_tag => [ "TESTING" ] }
# 	}
	
	
	
	# [ Syslog Priority ]
	# strip the syslog PRI part and create facility and severity fields.
	# the original syslog message is saved in field %{syslog_raw_message}.
	# the extracted PRI is available in the %{syslog_pri} field.
	#
	# You get %{syslog_facility_code} and %{syslog_severity_code} fields.
	# You also get %{syslog_facility} and %{syslog_severity} fields if the
	# use_labels option is set True (the default) on syslog_pri filter.
	syslog_pri {
		#add_tag => [ "got_syslog_pri" ]
		#add_field => [ "foo_%{somefield}", "Hello world, from %{host}" ]
		use_labels => true
	}
# 	date {
# 		type => "syslog"
# 		
# 		# The 'timestamp' and 'timestamp8601' names are for fields in the
# 		# logstash event.  The 'SYSLOGLINE' grok pattern above includes a field
# 		# named 'timestamp' that is set to the normal syslog timestamp if it
# 		# exists in the event.
# 		timestamp => "MMM  d HH:mm:ss"   # syslog 'day' value can be space-leading
# 		timestamp => "MMM dd HH:mm:ss"
# 		timestamp8601 => ISO8601 # Some syslogs use ISO8601 time format
# 	}
}

# # Catch all Pattern
# filter {
#   grok {
#       type => "syslog"
#       pattern => [ "%{SYSLOGTIMESTAMP:timestamp_unix} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" ]
#       add_field => [ "received_at", "%{@timestamp}" ]
#       add_field => [ "received_from", "%{@source_host}" ]
#   }
#   date {
#       type => "syslog"
#       match => [ "timestamp_unix", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
#   }
#   mutate {
#       type => "syslog"
#       exclude_tags => "_grokparsefailure"
#       replace => [ "@source_host", "%{syslog_hostname}" ]
#       replace => [ "@message", "%{syslog_message}" ]
#   }
#   mutate {
#       type => "syslog"
#       add_tag => "_catchall"
#       remove => [ "syslog_hostname", "syslog_message", "timestamp_unix", "received_at", "received_from" ]
#   }
# }

############################################ Output ###############################################
output {
#	stdout { debug => true debug_format => "json"}
#	stdout { codec => rubydebug }
	elasticsearch { embedded => true }
	
# 	elasticsearch_http {
# 		host => "127.0.0.1"
# 		template_overwrite => true
# 		flush_size => 1
# 	}
}


############################################ NOTES ###############################################
# /volume1/active_system/logstash/patterns/austin-patterns
# MERAKI_TAGGED_SYSLOG ^<%{POSINT:syslog_pri}>%{INT} %{BASE10NUM:timestamp_unix} %{WORD:host_title} (?:events )?(?:Site-to-site )?%{WORD:type}(?::)? %{GREEDYDATA:message_new}
# MERAKIURI %{URIPROTO:request_proto}://(?:%{USER:request_user}(?::[^@]*)?@)?(?:\*\.)?(?:%{URIHOST:request_host})?(?:%{URIPATHPARAM:request_path})?